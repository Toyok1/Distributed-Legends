# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import chat_pb2 as chat__pb2


class ChatServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ChatStream = channel.unary_stream(
                '/grpc.ChatServer/ChatStream',
                request_serializer=chat__pb2.Empty.SerializeToString,
                response_deserializer=chat__pb2.Note.FromString,
                )
        self.SendNote = channel.unary_unary(
                '/grpc.ChatServer/SendNote',
                request_serializer=chat__pb2.Note.SerializeToString,
                response_deserializer=chat__pb2.Empty.FromString,
                )
        self.SendPrivateInfo = channel.unary_unary(
                '/grpc.ChatServer/SendPrivateInfo',
                request_serializer=chat__pb2.PrivateInfo.SerializeToString,
                response_deserializer=chat__pb2.Empty.FromString,
                )
        self.SendPing = channel.unary_unary(
                '/grpc.ChatServer/SendPing',
                request_serializer=chat__pb2.Ping.SerializeToString,
                response_deserializer=chat__pb2.Pong.FromString,
                )
        self.StartGame = channel.unary_unary(
                '/grpc.ChatServer/StartGame',
                request_serializer=chat__pb2.PrivateInfo.SerializeToString,
                response_deserializer=chat__pb2.InitialList.FromString,
                )
        self.SendHealth = channel.unary_unary(
                '/grpc.ChatServer/SendHealth',
                request_serializer=chat__pb2.Health.SerializeToString,
                response_deserializer=chat__pb2.Empty.FromString,
                )
        self.SendBlock = channel.unary_unary(
                '/grpc.ChatServer/SendBlock',
                request_serializer=chat__pb2.Block.SerializeToString,
                response_deserializer=chat__pb2.Empty.FromString,
                )
        self.SendAction = channel.unary_unary(
                '/grpc.ChatServer/SendAction',
                request_serializer=chat__pb2.Action.SerializeToString,
                response_deserializer=chat__pb2.Empty.FromString,
                )
        self.HealthStream = channel.unary_stream(
                '/grpc.ChatServer/HealthStream',
                request_serializer=chat__pb2.Empty.SerializeToString,
                response_deserializer=chat__pb2.Health.FromString,
                )
        self.BlockStream = channel.unary_stream(
                '/grpc.ChatServer/BlockStream',
                request_serializer=chat__pb2.Empty.SerializeToString,
                response_deserializer=chat__pb2.Block.FromString,
                )
        self.ActionStream = channel.unary_stream(
                '/grpc.ChatServer/ActionStream',
                request_serializer=chat__pb2.Empty.SerializeToString,
                response_deserializer=chat__pb2.Action.FromString,
                )
        self.GetInitialList = channel.unary_unary(
                '/grpc.ChatServer/GetInitialList',
                request_serializer=chat__pb2.Empty.SerializeToString,
                response_deserializer=chat__pb2.InitialList.FromString,
                )
        self.FinishGame = channel.unary_unary(
                '/grpc.ChatServer/FinishGame',
                request_serializer=chat__pb2.FinishedBool.SerializeToString,
                response_deserializer=chat__pb2.Empty.FromString,
                )
        self.FinishStream = channel.unary_stream(
                '/grpc.ChatServer/FinishStream',
                request_serializer=chat__pb2.Empty.SerializeToString,
                response_deserializer=chat__pb2.EndNote.FromString,
                )
        self.EndTurn = channel.unary_unary(
                '/grpc.ChatServer/EndTurn',
                request_serializer=chat__pb2.PlayerMessage.SerializeToString,
                response_deserializer=chat__pb2.Empty.FromString,
                )
        self.TurnStream = channel.unary_stream(
                '/grpc.ChatServer/TurnStream',
                request_serializer=chat__pb2.Empty.SerializeToString,
                response_deserializer=chat__pb2.PlayerMessage.FromString,
                )
        self.ReturnStarted = channel.unary_unary(
                '/grpc.ChatServer/ReturnStarted',
                request_serializer=chat__pb2.Empty.SerializeToString,
                response_deserializer=chat__pb2.StartedBool.FromString,
                )


class ChatServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ChatStream(self, request, context):
        """This bi-directional stream makes it possible to send and receive Notes between 2 persons
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendNote(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendPrivateInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendPing(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartGame(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendHealth(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendBlock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendAction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BlockStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ActionStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetInitialList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FinishGame(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FinishStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EndTurn(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TurnStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReturnStarted(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChatServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ChatStream': grpc.unary_stream_rpc_method_handler(
                    servicer.ChatStream,
                    request_deserializer=chat__pb2.Empty.FromString,
                    response_serializer=chat__pb2.Note.SerializeToString,
            ),
            'SendNote': grpc.unary_unary_rpc_method_handler(
                    servicer.SendNote,
                    request_deserializer=chat__pb2.Note.FromString,
                    response_serializer=chat__pb2.Empty.SerializeToString,
            ),
            'SendPrivateInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.SendPrivateInfo,
                    request_deserializer=chat__pb2.PrivateInfo.FromString,
                    response_serializer=chat__pb2.Empty.SerializeToString,
            ),
            'SendPing': grpc.unary_unary_rpc_method_handler(
                    servicer.SendPing,
                    request_deserializer=chat__pb2.Ping.FromString,
                    response_serializer=chat__pb2.Pong.SerializeToString,
            ),
            'StartGame': grpc.unary_unary_rpc_method_handler(
                    servicer.StartGame,
                    request_deserializer=chat__pb2.PrivateInfo.FromString,
                    response_serializer=chat__pb2.InitialList.SerializeToString,
            ),
            'SendHealth': grpc.unary_unary_rpc_method_handler(
                    servicer.SendHealth,
                    request_deserializer=chat__pb2.Health.FromString,
                    response_serializer=chat__pb2.Empty.SerializeToString,
            ),
            'SendBlock': grpc.unary_unary_rpc_method_handler(
                    servicer.SendBlock,
                    request_deserializer=chat__pb2.Block.FromString,
                    response_serializer=chat__pb2.Empty.SerializeToString,
            ),
            'SendAction': grpc.unary_unary_rpc_method_handler(
                    servicer.SendAction,
                    request_deserializer=chat__pb2.Action.FromString,
                    response_serializer=chat__pb2.Empty.SerializeToString,
            ),
            'HealthStream': grpc.unary_stream_rpc_method_handler(
                    servicer.HealthStream,
                    request_deserializer=chat__pb2.Empty.FromString,
                    response_serializer=chat__pb2.Health.SerializeToString,
            ),
            'BlockStream': grpc.unary_stream_rpc_method_handler(
                    servicer.BlockStream,
                    request_deserializer=chat__pb2.Empty.FromString,
                    response_serializer=chat__pb2.Block.SerializeToString,
            ),
            'ActionStream': grpc.unary_stream_rpc_method_handler(
                    servicer.ActionStream,
                    request_deserializer=chat__pb2.Empty.FromString,
                    response_serializer=chat__pb2.Action.SerializeToString,
            ),
            'GetInitialList': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInitialList,
                    request_deserializer=chat__pb2.Empty.FromString,
                    response_serializer=chat__pb2.InitialList.SerializeToString,
            ),
            'FinishGame': grpc.unary_unary_rpc_method_handler(
                    servicer.FinishGame,
                    request_deserializer=chat__pb2.FinishedBool.FromString,
                    response_serializer=chat__pb2.Empty.SerializeToString,
            ),
            'FinishStream': grpc.unary_stream_rpc_method_handler(
                    servicer.FinishStream,
                    request_deserializer=chat__pb2.Empty.FromString,
                    response_serializer=chat__pb2.EndNote.SerializeToString,
            ),
            'EndTurn': grpc.unary_unary_rpc_method_handler(
                    servicer.EndTurn,
                    request_deserializer=chat__pb2.PlayerMessage.FromString,
                    response_serializer=chat__pb2.Empty.SerializeToString,
            ),
            'TurnStream': grpc.unary_stream_rpc_method_handler(
                    servicer.TurnStream,
                    request_deserializer=chat__pb2.Empty.FromString,
                    response_serializer=chat__pb2.PlayerMessage.SerializeToString,
            ),
            'ReturnStarted': grpc.unary_unary_rpc_method_handler(
                    servicer.ReturnStarted,
                    request_deserializer=chat__pb2.Empty.FromString,
                    response_serializer=chat__pb2.StartedBool.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpc.ChatServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ChatServer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ChatStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpc.ChatServer/ChatStream',
            chat__pb2.Empty.SerializeToString,
            chat__pb2.Note.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendNote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.ChatServer/SendNote',
            chat__pb2.Note.SerializeToString,
            chat__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendPrivateInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.ChatServer/SendPrivateInfo',
            chat__pb2.PrivateInfo.SerializeToString,
            chat__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendPing(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.ChatServer/SendPing',
            chat__pb2.Ping.SerializeToString,
            chat__pb2.Pong.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartGame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.ChatServer/StartGame',
            chat__pb2.PrivateInfo.SerializeToString,
            chat__pb2.InitialList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendHealth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.ChatServer/SendHealth',
            chat__pb2.Health.SerializeToString,
            chat__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendBlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.ChatServer/SendBlock',
            chat__pb2.Block.SerializeToString,
            chat__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendAction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.ChatServer/SendAction',
            chat__pb2.Action.SerializeToString,
            chat__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HealthStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpc.ChatServer/HealthStream',
            chat__pb2.Empty.SerializeToString,
            chat__pb2.Health.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BlockStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpc.ChatServer/BlockStream',
            chat__pb2.Empty.SerializeToString,
            chat__pb2.Block.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ActionStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpc.ChatServer/ActionStream',
            chat__pb2.Empty.SerializeToString,
            chat__pb2.Action.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetInitialList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.ChatServer/GetInitialList',
            chat__pb2.Empty.SerializeToString,
            chat__pb2.InitialList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FinishGame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.ChatServer/FinishGame',
            chat__pb2.FinishedBool.SerializeToString,
            chat__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FinishStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpc.ChatServer/FinishStream',
            chat__pb2.Empty.SerializeToString,
            chat__pb2.EndNote.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EndTurn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.ChatServer/EndTurn',
            chat__pb2.PlayerMessage.SerializeToString,
            chat__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TurnStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpc.ChatServer/TurnStream',
            chat__pb2.Empty.SerializeToString,
            chat__pb2.PlayerMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReturnStarted(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.ChatServer/ReturnStarted',
            chat__pb2.Empty.SerializeToString,
            chat__pb2.StartedBool.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
