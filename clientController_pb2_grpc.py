# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import clientController_pb2 as clientController__pb2


class ClientControllerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendPing = channel.unary_unary(
                '/grpc.ClientController/SendPing',
                request_serializer=clientController__pb2.Ping.SerializeToString,
                response_deserializer=clientController__pb2.Pong.FromString,
                )
        self.RecieveList = channel.unary_unary(
                '/grpc.ClientController/RecieveList',
                request_serializer=clientController__pb2.PlayerMessage.SerializeToString,
                response_deserializer=clientController__pb2.Empty.FromString,
                )
        self.RecieveUid = channel.unary_unary(
                '/grpc.ClientController/RecieveUid',
                request_serializer=clientController__pb2.PlayerMessage.SerializeToString,
                response_deserializer=clientController__pb2.Empty.FromString,
                )
        self.SendAction = channel.unary_unary(
                '/grpc.ClientController/SendAction',
                request_serializer=clientController__pb2.Action.SerializeToString,
                response_deserializer=clientController__pb2.Empty.FromString,
                )
        self.ActionStream = channel.unary_stream(
                '/grpc.ClientController/ActionStream',
                request_serializer=clientController__pb2.Empty.SerializeToString,
                response_deserializer=clientController__pb2.Action.FromString,
                )
        self.FinishStream = channel.unary_stream(
                '/grpc.ClientController/FinishStream',
                request_serializer=clientController__pb2.Empty.SerializeToString,
                response_deserializer=clientController__pb2.EndNote.FromString,
                )
        self.TerminatedStream = channel.unary_stream(
                '/grpc.ClientController/TerminatedStream',
                request_serializer=clientController__pb2.Empty.SerializeToString,
                response_deserializer=clientController__pb2.PlayerMessage.FromString,
                )
        self.EndTurn = channel.unary_unary(
                '/grpc.ClientController/EndTurn',
                request_serializer=clientController__pb2.PlayerMessage.SerializeToString,
                response_deserializer=clientController__pb2.Empty.FromString,
                )
        self.TurnStream = channel.unary_stream(
                '/grpc.ClientController/TurnStream',
                request_serializer=clientController__pb2.Empty.SerializeToString,
                response_deserializer=clientController__pb2.PlayerMessage.FromString,
                )
        self.FinishGame = channel.unary_unary(
                '/grpc.ClientController/FinishGame',
                request_serializer=clientController__pb2.EndNote.SerializeToString,
                response_deserializer=clientController__pb2.Empty.FromString,
                )


class ClientControllerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SendPing(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecieveList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecieveUid(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendAction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ActionStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FinishStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TerminatedStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EndTurn(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TurnStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FinishGame(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClientControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendPing': grpc.unary_unary_rpc_method_handler(
                    servicer.SendPing,
                    request_deserializer=clientController__pb2.Ping.FromString,
                    response_serializer=clientController__pb2.Pong.SerializeToString,
            ),
            'RecieveList': grpc.unary_unary_rpc_method_handler(
                    servicer.RecieveList,
                    request_deserializer=clientController__pb2.PlayerMessage.FromString,
                    response_serializer=clientController__pb2.Empty.SerializeToString,
            ),
            'RecieveUid': grpc.unary_unary_rpc_method_handler(
                    servicer.RecieveUid,
                    request_deserializer=clientController__pb2.PlayerMessage.FromString,
                    response_serializer=clientController__pb2.Empty.SerializeToString,
            ),
            'SendAction': grpc.unary_unary_rpc_method_handler(
                    servicer.SendAction,
                    request_deserializer=clientController__pb2.Action.FromString,
                    response_serializer=clientController__pb2.Empty.SerializeToString,
            ),
            'ActionStream': grpc.unary_stream_rpc_method_handler(
                    servicer.ActionStream,
                    request_deserializer=clientController__pb2.Empty.FromString,
                    response_serializer=clientController__pb2.Action.SerializeToString,
            ),
            'FinishStream': grpc.unary_stream_rpc_method_handler(
                    servicer.FinishStream,
                    request_deserializer=clientController__pb2.Empty.FromString,
                    response_serializer=clientController__pb2.EndNote.SerializeToString,
            ),
            'TerminatedStream': grpc.unary_stream_rpc_method_handler(
                    servicer.TerminatedStream,
                    request_deserializer=clientController__pb2.Empty.FromString,
                    response_serializer=clientController__pb2.PlayerMessage.SerializeToString,
            ),
            'EndTurn': grpc.unary_unary_rpc_method_handler(
                    servicer.EndTurn,
                    request_deserializer=clientController__pb2.PlayerMessage.FromString,
                    response_serializer=clientController__pb2.Empty.SerializeToString,
            ),
            'TurnStream': grpc.unary_stream_rpc_method_handler(
                    servicer.TurnStream,
                    request_deserializer=clientController__pb2.Empty.FromString,
                    response_serializer=clientController__pb2.PlayerMessage.SerializeToString,
            ),
            'FinishGame': grpc.unary_unary_rpc_method_handler(
                    servicer.FinishGame,
                    request_deserializer=clientController__pb2.EndNote.FromString,
                    response_serializer=clientController__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpc.ClientController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ClientController(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SendPing(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.ClientController/SendPing',
            clientController__pb2.Ping.SerializeToString,
            clientController__pb2.Pong.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RecieveList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.ClientController/RecieveList',
            clientController__pb2.PlayerMessage.SerializeToString,
            clientController__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RecieveUid(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.ClientController/RecieveUid',
            clientController__pb2.PlayerMessage.SerializeToString,
            clientController__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendAction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.ClientController/SendAction',
            clientController__pb2.Action.SerializeToString,
            clientController__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ActionStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpc.ClientController/ActionStream',
            clientController__pb2.Empty.SerializeToString,
            clientController__pb2.Action.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FinishStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpc.ClientController/FinishStream',
            clientController__pb2.Empty.SerializeToString,
            clientController__pb2.EndNote.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TerminatedStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpc.ClientController/TerminatedStream',
            clientController__pb2.Empty.SerializeToString,
            clientController__pb2.PlayerMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EndTurn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.ClientController/EndTurn',
            clientController__pb2.PlayerMessage.SerializeToString,
            clientController__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TurnStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpc.ClientController/TurnStream',
            clientController__pb2.Empty.SerializeToString,
            clientController__pb2.PlayerMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FinishGame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.ClientController/FinishGame',
            clientController__pb2.EndNote.SerializeToString,
            clientController__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
