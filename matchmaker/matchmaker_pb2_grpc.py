# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import matchmaker_pb2 as matchmaker__pb2


class MatchmakerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.newGame = channel.unary_unary(
                '/Matchmaker/newGame',
                request_serializer=matchmaker__pb2.NewGameRequest.SerializeToString,
                response_deserializer=matchmaker__pb2.NewGameReply.FromString,
                )
        self.listGame = channel.unary_stream(
                '/Matchmaker/listGame',
                request_serializer=matchmaker__pb2.ListGameRequest.SerializeToString,
                response_deserializer=matchmaker__pb2.ListGameReply.FromString,
                )
        self.findGame = channel.unary_stream(
                '/Matchmaker/findGame',
                request_serializer=matchmaker__pb2.FindGameRequest.SerializeToString,
                response_deserializer=matchmaker__pb2.FindGameReply.FromString,
                )
        self.deleteGame = channel.unary_unary(
                '/Matchmaker/deleteGame',
                request_serializer=matchmaker__pb2.DeleteGameRequest.SerializeToString,
                response_deserializer=matchmaker__pb2.DeleteGameReply.FromString,
                )
        self.saveGame = channel.unary_unary(
                '/Matchmaker/saveGame',
                request_serializer=matchmaker__pb2.SaveGameRequest.SerializeToString,
                response_deserializer=matchmaker__pb2.SaveGameReply.FromString,
                )


class MatchmakerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def newGame(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listGame(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def findGame(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteGame(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def saveGame(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MatchmakerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'newGame': grpc.unary_unary_rpc_method_handler(
                    servicer.newGame,
                    request_deserializer=matchmaker__pb2.NewGameRequest.FromString,
                    response_serializer=matchmaker__pb2.NewGameReply.SerializeToString,
            ),
            'listGame': grpc.unary_stream_rpc_method_handler(
                    servicer.listGame,
                    request_deserializer=matchmaker__pb2.ListGameRequest.FromString,
                    response_serializer=matchmaker__pb2.ListGameReply.SerializeToString,
            ),
            'findGame': grpc.unary_stream_rpc_method_handler(
                    servicer.findGame,
                    request_deserializer=matchmaker__pb2.FindGameRequest.FromString,
                    response_serializer=matchmaker__pb2.FindGameReply.SerializeToString,
            ),
            'deleteGame': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteGame,
                    request_deserializer=matchmaker__pb2.DeleteGameRequest.FromString,
                    response_serializer=matchmaker__pb2.DeleteGameReply.SerializeToString,
            ),
            'saveGame': grpc.unary_unary_rpc_method_handler(
                    servicer.saveGame,
                    request_deserializer=matchmaker__pb2.SaveGameRequest.FromString,
                    response_serializer=matchmaker__pb2.SaveGameReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Matchmaker', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Matchmaker(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def newGame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Matchmaker/newGame',
            matchmaker__pb2.NewGameRequest.SerializeToString,
            matchmaker__pb2.NewGameReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def listGame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Matchmaker/listGame',
            matchmaker__pb2.ListGameRequest.SerializeToString,
            matchmaker__pb2.ListGameReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def findGame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Matchmaker/findGame',
            matchmaker__pb2.FindGameRequest.SerializeToString,
            matchmaker__pb2.FindGameReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteGame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Matchmaker/deleteGame',
            matchmaker__pb2.DeleteGameRequest.SerializeToString,
            matchmaker__pb2.DeleteGameReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def saveGame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Matchmaker/saveGame',
            matchmaker__pb2.SaveGameRequest.SerializeToString,
            matchmaker__pb2.SaveGameReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
